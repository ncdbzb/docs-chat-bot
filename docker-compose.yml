services:
  db:
    image: postgres:17
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME?Variable not set}
      - POSTGRES_USER=${DB_USER?Variable not set}
      - POSTGRES_PASSWORD=${DB_PASS?Variable not set}
      - LANGFUSE_POSTGRES_DB=${LANGFUSE_POSTGRES_DB?Variable not set}
    expose:
      - ${DB_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./scripts/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 3s
      timeout: 3s
      retries: 10
  
  redis:
    image: redis/redis-stack-server:7.4.0-v5
    container_name: redis
    env_file:
      - .env
    expose:
      - ${REDIS_PORT}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: "redis-server --requirepass ${REDIS_PASSWORD}"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 10s
      retries: 10

  chromadb:
    image: chromadb/chroma:1.0.12
    container_name: chromadb
    expose:
      - ${CHROMADB_PORT}
    restart: unless-stopped
    volumes:
      - chroma_data:/chroma/chroma
      - ./chromadb_config.yaml:/config.yaml
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/${CHROMADB_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z
    container_name: minio
    restart: always
    command: server /data --address :${MINIO_API_PORT} --console-address :${MINIO_CONSOLE_PORT}
    ports:
      - ${MINIO_API_PORT}:${MINIO_API_PORT}
      - ${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 1s

  docs_api:
    build:
      context: ./docs_api
      dockerfile: Dockerfile.docs_api
    env_file:
      - .env
    environment: &minio-env
      MINIO_ENDPOINT: ${MINIO_DOMAIN}:${MINIO_API_PORT}
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY}
      LANGFUSE_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY}
      LANGFUSE_HOST: http://langfuse-web:3000
    container_name: docs_api
    expose:
      - ${DOCS_API_PORT}
    command: >
      uvicorn app.main:app --host 0.0.0.0 --port ${DOCS_API_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request, sys; sys.exit(0) if urllib.request.urlopen('http://localhost:${DOCS_API_PORT}/health').getcode() == 200 else sys.exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    env_file:
      - .env
    environment:
      <<: *minio-env
    container_name: backend
    restart: always
    volumes:
      - ./backend/migrations/versions:/app/migrations/versions
    expose:
      - ${BACKEND_PORT}
    depends_on:
      docs_api:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_API_URL: "https://${SERVER_DOMAIN}/api"
        REACT_APP_API_FRONT_URL: "https://${SERVER_DOMAIN}"
    container_name: frontend
    volumes:
      - nginx_certs:/etc/nginx/certs
    ports:
      - "444:443"
      - "4443:4443"
    restart: always
    depends_on:
      - backend

  pgadmin:
    image: dpage/pgadmin4:9.6
    container_name: pg_admin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 40
    restart: always
    ports:
    - "8888:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    depends_on:
      db:
        condition: service_healthy

  langfuse-worker:
    image: langfuse/langfuse-worker:3
    restart: always
    container_name: langfuse_worker
    depends_on: &langfuse-depends-on
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    environment: &langfuse-worker-env
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${LANGFUSE_POSTGRES_DB}
      SALT: mysalt
      ENCRYPTION_KEY: ${LANGFUSE_ENCRYPTION_KEY}
      TELEMETRY_ENABLED: "true"
      LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES: "true"
      LANGFUSE_S3_EVENT_UPLOAD_BUCKET: ${LANGFUSE_S3_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_EVENT_UPLOAD_REGION: ${LANGFUSE_S3_UPLOAD_REGION:-auto}
      LANGFUSE_S3_EVENT_UPLOAD_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_EVENT_UPLOAD_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_EVENT_UPLOAD_ENDPOINT: http://minio:${MINIO_API_PORT}/
      LANGFUSE_S3_EVENT_UPLOAD_FORCE_PATH_STYLE: ${LANGFUSE_S3_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_EVENT_UPLOAD_PREFIX: ${LANGFUSE_S3_EVENT_UPLOAD_PREFIX:-events/}
      LANGFUSE_S3_BATCH_EXPORT_ENABLED: ${LANGFUSE_S3_BATCH_EXPORT_ENABLED}
      LANGFUSE_S3_BATCH_EXPORT_BUCKET: ${LANGFUSE_S3_UPLOAD_BUCKET:-langfuse}
      LANGFUSE_S3_BATCH_EXPORT_REGION: ${LANGFUSE_S3_UPLOAD_REGION:-auto}
      LANGFUSE_S3_BATCH_EXPORT_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      LANGFUSE_S3_BATCH_EXPORT_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      LANGFUSE_S3_BATCH_EXPORT_ENDPOINT: http://minio:${MINIO_API_PORT}/
      LANGFUSE_S3_BATCH_EXPORT_FORCE_PATH_STYLE: ${LANGFUSE_S3_FORCE_PATH_STYLE:-true}
      LANGFUSE_S3_BATCH_EXPORT_PREFIX: ${LANGFUSE_S3_BATCH_EXPORT_PREFIX:-exports/}
      LANGFUSE_S3_BATCH_EXPORT_EXTERNAL_ENDPOINT: "https://${SERVER_DOMAIN}/minio/"
      CLICKHOUSE_MIGRATION_URL: ${CLICKHOUSE_MIGRATION_URL:-clickhouse://clickhouse:9000}
      CLICKHOUSE_URL: ${CLICKHOUSE_URL:-http://clickhouse:8123} 
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-clickhouse}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      CLICKHOUSE_CLUSTER_ENABLED: ${CLICKHOUSE_CLUSTER_ENABLED:-false}
      REDIS_CONNECTION_STRING: "redis://:${REDIS_PASSWORD}@${REDIS_HOST}:${REDIS_PORT}/${REDIS_LANGFUSE_DB}"

  langfuse-web:
    image: langfuse/langfuse:3
    restart: always
    container_name: langfuse_web
    depends_on: *langfuse-depends-on
    environment:
      <<: *langfuse-worker-env
      NEXTAUTH_URL: ${LANGFUSE_NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${LANGFUSE_NEXTAUTH_SECRET:-secret}
      LANGFUSE_INIT_ORG_ID: ${LANGFUSE_INIT_ORG_ID:-}
      LANGFUSE_INIT_ORG_NAME: ${LANGFUSE_INIT_ORG_NAME:-}
      LANGFUSE_INIT_PROJECT_ID: ${LANGFUSE_INIT_PROJECT_ID:-}
      LANGFUSE_INIT_PROJECT_NAME: ${LANGFUSE_INIT_PROJECT_NAME:-}
      LANGFUSE_INIT_PROJECT_PUBLIC_KEY: ${LANGFUSE_INIT_PROJECT_PUBLIC_KEY:-}
      LANGFUSE_INIT_PROJECT_SECRET_KEY: ${LANGFUSE_INIT_PROJECT_SECRET_KEY:-}
      LANGFUSE_INIT_USER_EMAIL: ${LANGFUSE_INIT_USER_EMAIL:-admin@admin.com}
      LANGFUSE_INIT_USER_NAME: ${LANGFUSE_INIT_USER_NAME:-admin}
      LANGFUSE_INIT_USER_PASSWORD: ${LANGFUSE_INIT_USER_PASSWORD:-admin123}

  clickhouse:
    image: clickhouse/clickhouse-server:25.3.2.39
    restart: always
    user: "101:101"
    container_name: clickhouse
    hostname: clickhouse
    env_file:
      - .env
    volumes:
      - langfuse_clickhouse_data:/var/lib/clickhouse
      - langfuse_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: wget --no-verbose --tries=1 --spider ${CLICKHOUSE_URL}/ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 1s
  
volumes:
  pgdata:
  pgadmin_data:
  nginx_certs:
  chroma_data:
  minio_data:
  langfuse_clickhouse_data:
  langfuse_clickhouse_logs:
